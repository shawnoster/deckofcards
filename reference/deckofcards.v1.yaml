openapi: 3.0.0
info:
  title: Deck of Cards
  version: '1.0'
  description: Simulate a deck of cards
  license:
    name: MIT License
    url: 'https://github.com/shawnoster/deckofcards/blob/main/LICENSE'
  contact:
    name: Shawn Oster
    email: shawn.oster@gmail.com
servers:
  - url: 'http://localhost:3000'
    description: Local
  - url: 'https://azure.com/deckofcards'
    description: Development
tags:
  - name: deck
    description: Deck operations
paths:
  /deck/new/shuffle:
    get:
      summary: Shuffle the cards
      tags:
        - deck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  deck_id:
                    type: string
                    minLength: 1
                    example: 3p40paa87x90
                  shuffled:
                    type: boolean
                  remaining:
                    type: number
                required:
                  - success
                  - deck_id
                  - shuffled
                  - remaining
              examples:
                example-1:
                  value:
                    success: true
                    deck_id: 3p40paa87x90
                    shuffled: true
                    remaining: 52
      operationId: get-deck-new-shuffle
      parameters:
        - schema:
            type: integer
            default: 1
            example: 1
          in: query
          name: deck-count
          description: Number of decks to use
      description: Shuffle the cards
  '/deck/{deck-id}/draw':
    get:
      summary: Draw a card
      tags:
        - deck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  cards:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/card'
                  deck_id:
                    type: string
                    minLength: 1
                  remaining:
                    type: number
                required:
                  - success
                  - cards
                  - deck_id
                  - remaining
      operationId: get-deck-deck-id-draw
      description: Draw a card
      parameters:
        - schema:
            type: integer
          in: query
          name: count
    parameters:
      - schema:
          type: string
        name: deck-id
        in: path
        required: true
        description: Deck identifier
  '/deck/{deck-id}/shuffle':
    parameters:
      - schema:
          type: string
        name: deck-id
        in: path
        required: true
    get:
      summary: Reshuffle the cards
      tags:
        - deck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  deck_id:
                    type: string
                    minLength: 1
                  shuffled:
                    type: boolean
                  remaining:
                    type: number
                required:
                  - success
                  - deck_id
                  - shuffled
                  - remaining
      operationId: get-deck-deck-id-shuffle
      description: Reshuffle the cards.
components:
  schemas:
    card:
      description: A single card
      type: object
      x-examples:
        example-1:
          image: 'http://example.com'
          value: string
          suit: HEARTS
          code: 8C
      title: card
      properties:
        image:
          type: string
          minLength: 1
          format: uri
          description: URL to image file
        value:
          type: string
          minLength: 1
          description: 'Card value (A, 2, 3, etc.)'
        suit:
          type: string
          minLength: 1
          enum:
            - HEARTS
            - CLUBS
            - SPADES
            - HEARTS
          example: HEARTS
          description: 'Hearts, Clubs, Spades, Diamonds'
        code:
          type: string
          maxLength: 2
          minLength: 2
          example: 8C
          description: 'First character is the value, second is suit'
      required:
        - image
        - value
        - suit
        - code
